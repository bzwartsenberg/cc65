SYMBOLS {
    __STACKSIZE__: type = weak, value = $0800; # 3 pages stack
}
MEMORY {
    ZP:     start = $0020, size = $00C0, type = rw, define = yes;
    HEADER: file = %O, start = $0000, size = $0004;
    RAM1:    file = %O, start = $0280, size = $0B80;
    RAM2:    file = %O, start = $E000, size = $1000;
}
SEGMENTS {
    EXEHDR:   load = HEADER,          type = ro;
    STARTUP:  load = RAM1,            type = ro,  define = yes;
    LOWCODE:  load = RAM1,            type = ro,                optional = yes;
    INIT:     load = RAM1,            type = ro,  define = yes, optional = yes;
    ONCE:     load = RAM1,            type = ro,  optional = yes;
    CODE:     load = RAM1,            type = ro;
    RODATA:   load = RAM1,            type = ro;
    DATA:     load = RAM1,            type = rw;
    BSS:      load = RAM2,            type = bss, define = yes;
    HEAP:     load = RAM2,            type = bss,                 optional = yes;
    ZEROPAGE: load = ZP,              type = zp;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA;
}
